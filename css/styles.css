/*
Colors Used
Primary Color: #357b70;
Primary Background: #fffafa;
Primary Font Color: #222;
Primary Font Size: 18px;
Primary Button Text Color: #f8f8ff;
Secondary Color: #e0b354;
Secondary Font Size: 16px;
Visited Link: #05676e;
Active Link: #489c79;
Dark Grey: #2b2b2b;
Error Color: #8b0000;
Grid Background Color: #ddd;
Header Font Weight: 700;
*/

/* CSS variables */
:root {
  --primary-color: #357b70;
  --primary-background: #fffafa;
  --primary-font-color: #222;
  --primary-font-size: 18px;
  --button-text-primary: #f8f8ff;
  --secondary-color: #e0b354;
  --secondary-font-size: 16px;
  --visited-link: #05676e;
  --active-link: #489c79;
  --dark-grey: #2b2b2b;
  --error-color: #8b0000;
  --grid-background-color: #ddd;
  --header-font-weight: 700;
}

/* This forces Box model into including padding and border in element size calculations if an element has been given a specific size. */
* {
  box-sizing: border-box;
}

/* meaning if you wanted an element of 124px with a padding of 20px and a border of 4px would actually turn into 100px making it more uniform. */

/* BODY */
body {
  font-family: 'Lato', sans-serif;
  font-weight: 400;
  font-size: var(--secondary-font-size);
  line-height: 1.6;
  background-color: var(--primary-background);
}

p {
  font-size: var(--secondary-font-size);
}

/* HEADERS */
h1 {
  font-size: 30px;
  font-weight: var(--header-font-weight);
}

h2 {
  font-size: 24px;
  font-weight: var(--header-font-weight);
}

h3 {
  font-size: 18px;
  font-weight: var(--header-font-weight);
}

/* LINKS */
a {
  color: var(--primary-color);
  font-size: var(--primary-font-size);
}

a:visited {
  /* visited link */
  color: var(--visited-link);
  font-size: var(--primary-font-size);
}

/* a:hover shows an effect when the mouse is hovering over a link or a button. a:focus does the same thing while the user navigates the web page with the keyboard */
a:hover,
a:focus {
  /* No underlining when hovering over a link */
  text-decoration: none;
  opacity: 0.5;
  transition: 0.9s opacity;
}

a:active {
  /* selected link */
  color: var(--active-link);
}

/* BUTTONS */
button,
.button,
.button_secondary {
  /* overwrites browser defaults and resets the border */
  border: none;

  /* takes the font from the outer container */
  display: inline-block;
  font-family: inherit;

  /* styles the background color, font color, and text decoration (underline, etc.) of the button */
  background-color: var(--primary-color);
  color: var(--button-text-primary);
  text-decoration: none;

  /* adds spacing to the button (this will be discussed more in-depth later) */
  padding: 10px;
  border-radius: 3px;

  /* gives the button a bottom border with a width of 2px, a type of solid, and a color in RGBA format */
  border-bottom: 2px solid rgba(0, 0, 0, 0.3);
  transition: 0.2s opacity; /* The longer format would be:
  transition-duration: 0.2s;
  transition-property: opacity;       The shorter format gibves the duration and property requirements, while the (transition-timing-function) defaults to (ease) and the (transition-delay) defaults to (0s) thus allowing a shorthand version by simply using --> transition: (duration) (property); */
}

button:hover,
button:focus,
.button:hover,
.button:focus {
  /* lets the mouse appear as a hand when hovering over the button */
  cursor: pointer;

  /* reduces the opacity of the button to 80% */
  opacity: 0.8;
}

.button_secondary {
  background-color: var(--secondary-color);
  color: var(--primary-font-color);
}

/* Required fields */

/* When reffering to a (class) to change it's characteristics in CSS you must add the (.) in order to pull up the specific (class). */

.required-field {
  font-family: inherit;
  font-size: 26px;
  color: var(--error-color);
  text-decoration: none;
}

.max-length {
  font-family: inherit;
  font-size: 24px;
  color: var(--error-color);
  text-decoration: none;
  padding: 10px;
}

/* PORTFOLIO PORTRAIT */
@keyframes rotate-picture {
  0% {
    transform: rotateY(0);
  }

  100% {
    transform: rotateY(360deg);
  }
}

.rotate-picture {
  animation: 0.5s rotate-picture 1 linear;
}

.profile__portrait {
  float: left;
  width: 100%; /* Height and Width can be expressed in multiple ways including % (80%) which can be useful when coding for multiple platforms. This is not limited to px and %. */
  max-width: 325px; /* Combined with (width: 100%;) this allows the image to take up 100% of the width of smaller screens and allowing the image to be larger/but no larger than the 325px allotted */
  height: auto; /* By setting the height to auto the aspect ratio remains true (no squished/stretched images) */
  margin-right: 40px;
  border-radius: 50%;
}

.profile {
  max-width: 700px;
  margin: 0 auto;
}

/* PAGE-FOOTER */
.page-footer {
  clear: both;
  display: flex;
  flex-direction: column;
  text-align: center;
}

/* PAGE-HEADER      The following is flex-box layout */
.page-header {
  display: flex;
  width: 100%;
  padding: 10px;
}

.page-header__item {
  flex: 0 1 200px;   /* Gives all items base width of 200px and allows to shrink within same ratio. (growth will be added to nav only) */
  padding: 10px;
}

.page-header__item:last-child {
  flex-grow: 1;
  text-align: right;
}

/* ABOUT PAGE */
.about {
  clear: both;
  display: flex;
  flex-direction: column;
  text-align: center;
}

.about-list {
  list-style-type: none;
  padding: 0;
}

.contact_menu {
  clear: both;
  display: flex;
  flex-direction: column;
  text-align: left;
  padding: 20px;
}

/* NAVIGATION */
.navigation-list {
  list-style-type: none;
}

.navigation-list li {
  display: inline-block;
  margin-left: 15px;
}

.navigation-list__item--active {
  text-decoration: none;
}

/* Grid fallback */
.grid__item {
  display: inline-block;
  width: 33%;
}

/* Styling CSS Grid */

/* The following is an example of a Grid layout. */
.grid {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr; /*  (1fr 1fr 1fr) (fr) stands for fraction and is a flex unit replacing the original (300px 300px 300px) value, you can use this because each grid item should be the same size. (fr) allows the columns to grow and shring within the page. Each section is spaced based on the other. If you wanted one column to be twice the size of the original you pass on the trait 2fr */

  /* grid-template-row: default is auto so you don't even need to add it, grid will add for you. */
  grid-gap: 20px; /* Puts spacing between the grid items like margin would do by using (grid-gap) */
}

.grid__item {
  background-color: var(--grid-background-color);
  width: auto;
  padding: 10px;
}

.grid__item:last-child {
  grid-column: 3/3;
  grid-row: 1/3;

  /* Longer way to code this:
  .grid__item:last-child {
    grid-column-start: 3;
    grid-column-end: 3;
    grid-row-start: 1;
    grid-row-end: 3;
  }
  */
}

/* Here we have Animation @keyframe rules */
@keyframes color-change {    /* color-change is the name of the animation which is used to target a specific element. */
  0% {
    fill: #edc655;
  }

  50% {
    fill: #fcffad;       /* This animation is being used to effect the sun on the about page. the (class) [].sun] has already been added to the SVG image in the example. */
  }

  100% {
    fill: #f76414;
  }
}

.sun {
  animation: 4s color-change infinite alternate linear;
}

/* Longer format for the .sun animation:
.sun {
  animation-duration: 4s;
  animation-name: color-change;
  animation-iteration-count: infinite;
  animation-direction: alternate;
  animation-timing-function: linear;
}
*/

@keyframes cloud-move {
  from {
    transform: translate(100px, 10px);
  }

  to {
    transform: translate(0, 10px);
  }
}

.cloud-front {
  animation: 20s cloud-move infinite alternate linear;
}

@keyframes cloud-move-reverse {
  from {
    transform: translate(-30px, 10px);
  }

  to {
    transform: translate(89px, 10px);
  }
}

.cloud-back {
  animation: 10s cloud-move-reverse infinite alternate linear;
}

.hometown-picture {
  width: 80%;
  height: auto;
  text-align: center;
}

/* Media Queries all go at the end of CSS as the last rule in CSS is the winner. If you have a new rule following media query, it will not be used. */
@media all and (max-width: 500px) {
  .grid {
    grid-template-columns: 1fr;
  }
}

@media all and (min-width: 500px) and (max-width: 750px) {
  .grid {
    grid-template-columns: 1fr 1fr;
  }
}

@media all and (max-width: 750px) {
  .grid {
    grid-gap: 10px;
  }

  .grid__item:last-child {
    grid-column: auto / auto;
    grid-row: auto / auto;
  }

  h1 {
    font-size: 22px;
  }
}

/* This is the long version of the above code full of redundant code:::

@media all and (max-width: 500px) {
  .grid {
    grid-template-columns: 1fr;
    grid-gap: 10px;
  }
  .grid__item:last-child {
    grid-column: auto / auto;
    grid-row: auto / auto;
  }
  h1 {
    font-size: 22px;
  }
}
@media all and (min-width: 500px) and (max-width: 750px){
  .grid {
    grid-template-columns: 1fr 1fr;
    grid-gap: 10px;
  }
  .grid__item:last-child {
    grid-column: auto / auto;
    grid-row: auto / auto;
  }
  h1 {
    font-size: 22px;
  }
}

*/
@media all and (max-width: 500px) {
  .page-header {
    padding: 0;
  }
}
