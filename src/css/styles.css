/*
Colors Used
Primary Color: #357b70;
Primary Background: #fffafa;
Primary Font Color: #222;
Primary Font Size: 18px;
New Primary Button Text: #000;
Old Primary Button Text Color: #f8f8ff;
New Secondary Color: #ccc;
Secondary Color: #e0b354;
Secondary Font Size: 16px;
New Visited Link: #065535;
Old Visited Link: #05676e;
Active Link: #489c79;
Dark Grey: #2b2b2b;
Error Color: #8b0000;
Grid Background Color: #ddd;
Header Font Weight: 700;
Button Background: #cbbeb5;
Other Grey: #696969;

New Grey: #7F8688;
New LightGrey: #929D9E;
Green: #4caf50;
White: #f2f2f2;
#0ff
#67c8ff
*/

/* CSS variables */
:root {
  --primary-color: #4caf50;
  --primary-background: #7f8688;
  --primary-font-color: #f2f2f2;
  --primary-font-size: 18px;
  --button-text-primary: #f2f2f2;
  --secondary-color: #929d9e;
  --secondary-font-size: 16px;
  --visited-link: #67c8ff;
  --active-link: #0ff;
  --dark-grey: #2b2b2b;
  --error-color: #8b0000;
  --grid-background-color: #ddd;
  --header-font-weight: 700;
  --button-background: #4caf50;
}

/* This forces Box model into including padding and border
 in element size calculations if an element has been given a specific size. */
* {
  box-sizing: border-box;
}

/* meaning if you wanted an element of 124px with a padding
of 20px and a border of 4px would actually turn into 100px
making it more uniform. */

/* BODY */
body {
  /* Remember that you have to add the 'Lato' font
  into the <head> of an HTML document before it will load.
  The comma followed by sans-serif is a default font that
  will be used if Lato can't be used. */
  font-family: 'Lato', sans-serif;
  font-weight: 400;
  font-size: var(--secondary-font-size);
  line-height: 1.6;
  background-color: var(--primary-background);
  color: var(--primary-font-color);
  height: 100%;
}

p {
  font-size: var(--secondary-font-size);
}

/* HEADERS */
h1 {
  font-size: 30px;
  font-weight: var(--header-font-weight);
  margin: 2rem;
}

h2 {
  font-size: 24px;
  font-weight: var(--header-font-weight);
  margin: 2rem;
}

h3 {
  font-size: 18px;
  font-weight: var(--header-font-weight);
}

/* LINKS */
a {
  color: var(--active-link);
  font-size: var(--primary-font-size);
}

a:visited {
  /* visited link */
  color: var(--visited-link);
  font-size: var(--primary-font-size);
}

/* a:hover shows an effect when the mouse is hovering over a
link or a button. a:focus does the same thing while the user
navigates the web page with the keyboard */

/* Important note that a:hover must come after a:visited,
and a:active must come after a:hover in order to work. */
a:hover,
a:focus {
  /* No underlining when hovering over a link */
  text-decoration: none;
  opacity: 0.5;
  transition: 0.9s opacity;
}

a:active {
  /* selected link */
  color: var(--active-link);
}

.app-ul {
  list-style-type: none;
  padding: 0;
}

/* ------ Image container for project pages ------ */
.app-image {
  max-width: 35rem;
  margin-bottom: 10px;
  border-radius: 4px;
}

/* BUTTONS */
button,
.button,
.button_secondary {
  /* overwrites browser defaults and resets the border */
  border: none;

  /* takes the font from the outer container */
  display: inline-block;
  font-family: inherit;

  /* styles the background color, font color,
   and text decoration (underline, etc.) of the button */
  background-color: var(--button-background);
  color: var(--button-text-primary);
  text-decoration: none;

  /* adds spacing to the button (this will be discussed more in-depth later) */
  padding: 10px;
  border-radius: 3px;

  /* gives the button a bottom border with a width of 2px,
  a type of solid, and a color in RGBA format */
  border-bottom: 2px solid rgba(0, 0, 0, 0.3);
  transition: 0.2s opacity;

  /* The longer format would be:
  transition-duration: 0.2s;
  transition-property: opacity;
  The shorter format gibves the duration and property
  requirements, while the (transition-timing-function)
   defaults to (ease) and the (transition-delay) defaults to
   (0s) thus allowing a shorthand version by simply using
   --> transition: (duration) (property); */
}

button:hover,
button:focus,
.button:hover,
.button:focus {
  /* lets the mouse appear as a hand when hovering over the button */
  cursor: pointer;

  /* reduces the opacity of the button to 80% */
  opacity: 0.8;
}

.button_secondary {
  background-color: var(--secondary-color);
  color: var(--primary-font-color);
}

.connection {
  margin: 2px;
  text-align: center;
}

.main-title {
  text-align: center;
}

.crue-title {
  font-size: 70px;
  margin: 1rem;
}

.crue-span {
  color: var(--primary-color);
}

/* ------ NAVIGATION ------ */
#navbar {
  position: fixed;
  width: 100%;
  top: 0;
  transition: top 1s;
}

.top-nav {
  background-color: #333;
  overflow: hidden;
}

.top-nav a {
  float: left;
  display: block;
  color: #f2f2f2;
  text-align: center;
  padding: 14px 16px;
  text-decoration: none;
  font-size: 17px;
}

.top-nav a:hover {
  background-color: #ddd;
  color: black;
}

.top-nav a.active {
  background-color: #4caf50;
  color: white;
}

.top-nav .icon {
  display: none;
}

.content {
  margin: 7rem 2.5rem 0;
}

.project-content {
  margin-top: 4rem;
  height: 100%;
}

/* Required fields */

/* When reffering to a (class) to change it's characteristics in
CSS you must add the (.) in order to pull up the specific (class). */

.required-field {
  font-family: inherit;
  font-size: 26px;
  color: var(--error-color);
  text-decoration: none;
}

/* PORTFOLIO PORTRAIT */
@keyframes rotate-picture {
  0% {
    transform: rotateY(0);
  }

  100% {
    transform: rotateY(360deg);
  }
}

.rotate-picture {
  animation: 0.5s rotate-picture 1 linear;
}

.profile__portrait {
  float: left;
  width: 100%; /* Height and Width can be expressed in multiple ways including % (80%) which can be useful when coding for multiple platforms. This is not limited to px and %. */
  max-width: 325px; /* Combined with (width: 100%;) this allows the image to take up 100% of the width of smaller screens and allowing the image to be larger/but no larger than the 325px allotted */
  height: auto; /* By setting the height to auto the aspect ratio remains true (no squished/stretched images) */
  margin-right: 40px;
  border-radius: 50%;
}

.profile {
  max-width: 700px;
  margin: auto;
}

.profile {
  clear: both;
}

/* PAGE-FOOTER */
.page-footer {
  clear: both;
  display: flex;
  flex-direction: column;
  text-align: center;
}

.logo-container {
  text-align: center;
  padding: 1rem;
}

.foot-wrap {
  background-color: var(--secondary-color);
  margin: 3rem 3rem 1.5rem;
  padding-bottom: 10px;
  border-radius: 4px;
}

/* ------ ABOUT PAGE ------ */

.about {
  clear: both;
  display: flex;
  flex-direction: column;
  text-align: center;
  background-color: var(--secondary-color);
  margin: 10px;
}

.about-title {
  font-size: 40px;
}

.grid-container {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  grid-gap: 5px;
  background-color: var(--primary-background);
  padding: 10px;
  margin: auto;
  margin-top: 10px;
  margin-bottom: 10px;
  width: 90%;
  border-radius: 5px;
}

.item-1 {
  grid-column: 1 / span 3;
}

.image-16 {
  grid-column: 1 / span 3;
}

.grid-container > div {
  background-color: var(--secondary-color);
  text-align: center;
  padding: 20px 0;
  font-size: 30px;
}

.about-blurb {
  background-color: var(--primary-background);
  color: var(--primary-font-color);
  padding: 10px;
  margin: auto;
  width: 90%;
  border-radius: 5px;
}

.cv-container {
  margin: 10px;
}

.animated-svg {
  margin-top: 10px;
}

svg {
  border: 5px solid var(--secondary-color);
  border-radius: 5px;
  padding: 0;
}

/* Here we have Animation @keyframe rules */
@keyframes color-change {
  /* color-change is the name of the animation which is used to target a specific element. */
  0% {
    fill: #edc655;
  }

  50% {
    fill: #fcffad; /* This animation is being used to effect the sun on the about page. the (class) [].sun] has already been added to the SVG image in the example. */
  }

  100% {
    fill: #f76414;
  }
}

.sun {
  animation: 4s color-change infinite alternate linear;
}

/* Longer format for the .sun animation:
.sun {
  animation-duration: 4s;
  animation-name: color-change;
  animation-iteration-count: infinite;
  animation-direction: alternate;
  animation-timing-function: linear;
}
*/

@keyframes cloud-move {
  from {
    transform: translate(100px, 10px);
  }

  to {
    transform: translate(0, 10px);
  }
}

.cloud-front {
  animation: 20s cloud-move infinite alternate linear;
}

@keyframes cloud-move-reverse {
  from {
    transform: translate(-30px, 10px);
  }

  to {
    transform: translate(89px, 10px);
  }
}

.cloud-back {
  animation: 10s cloud-move-reverse infinite alternate linear;
}

.hometown-picture {
  width: 80%;
  height: auto;
  text-align: center;
}

/* ------ Contact Page ------ */

.contact-title {
  text-align: center;
  padding-top: 30px;
}

/* Contact Form */

.contact-container {
  border-radius: 5px;
  background-color: var(--secondary-color);
  margin: 10px;
  padding: 0 10px;
}

input[type='text'],
select,
textarea {
  width: 100%;
  padding: 12px;
  border: 1px solid #ccc;
  border-radius: 4px;
  resize: vertical;
}

label {
  padding: 12px 12px 12px 0;
  display: inline-block;
}

.submit-container {
  text-align: center;
}

input[type='submit'] {
  width: 75%;
  background-color: #4caf50;
  color: white;
  padding: 12px 20px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

input[type='submit']:hover {
  width: 75%;
  background-color: #45a049;
}

.email-input {
  width: 100%;
  padding: 12px;
  border: 1px solid #ccc;
  border-radius: 4px;
  resize: vertical;
}

.col-form_label,
.col-form_input {
  width: 100%;
  margin-top: 0;
}

/* Clear floats after columns */
.row::after {
  content: '';
  display: table;
  clear: both;
}

.contact-info {
  display: block;
  text-align: center;
}

.additional-contact {
  background-color: var(--secondary-color);
  margin: 10px;
  padding: 10px;
  border-radius: 4px;
}

/* ------ Projects Page ------ */

.project-container {
  text-align: center;
  background-color: var(--secondary-color);
  padding-bottom: 20px;
  border-radius: 4px;
  margin: 10px;
}

/* Grid fallback */
.grid__item {
  display: inline-block;
  width: 33%;
  border-radius: 4px;
}

/* Styling CSS Grid */

/* The following is an example of a Grid layout. */
.grid {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr; /*  (1fr 1fr 1fr) (fr) stands for fraction and is a flex unit replacing the original (300px 300px 300px) value, you can use this because each grid item should be the same size. (fr) allows the columns to grow and shring within the page. Each section is spaced based on the other. If you wanted one column to be twice the size of the original you pass on the trait 2fr */
  grid-template-rows: 1fr 1fr;

  /* grid-template-row: default is auto so you don't even need to add it, grid will add for you. */
  grid-gap: 20px; /* Puts spacing between the grid items like margin would do by using (grid-gap) */
  margin: 0 1rem;
}

.grid > div {
  width: auto;
  background-color: var(--primary-background);
  padding: 10px;
  border-radius: 4px;
}

/* Longer way to code this:
  .grid__item:last-child {
    grid-column-start: 3;
    grid-column-end: 3;
    grid-row-start: 1;
    grid-row-end: 3;
  }
  */

/* Media Queries all go at the end of CSS as the
last rule in CSS is the winner. If you have a new
rule following media query, it will not be used. */
img.profile_portrait.rotate-picture {
  clear: both;
}

/* ------ cruebeeflix ------ */
.main-content {
  display: block;
  text-align: center;
  margin-top: 10px;
}

/* ------ Logo Spinner ------ */
@media (prefers-reduced-motion: no-preference) {
  .app-logo {
    animation: app-logo-spin infinite 20s linear;
  }
}

@keyframes app-logo-spin {
  from {
    transform: rotate(0deg);
  }

  to {
    transform: rotate(360deg);
  }
}

/* ----- index mediaquery ----- */
@media screen and (max-width: 600px) {
  .crue-title {
    font-size: 40px;
    margin: 1rem;
  }
}

@media screen and (max-width: 600px) {
  .profile {
    margin: 1rem;
    text-align: center;
    padding: 10px;
  }
}

@media screen and (max-width: 600px) {
  img.profile_portrait,
  .rotate-picture {
    margin: 0;
    text-align: center;
    justify-content: center;
  }
}

/* ----- Navbar media Query ------ */

@media screen and (max-width: 600px) {
  .top-nav a:not(:first-child) {
    display: none;
  }

  .top-nav a.icon {
    float: right;
    display: block;
  }
}

@media screen and (max-width: 600px) {
  .top-nav.responsive {
    position: relative;
  }

  .top-nav.responsive a.icon {
    position: absolute;
    right: 0;
    top: 0;
  }

  .top-nav.responsive a {
    float: none;
    display: block;
    text-align: left;
  }
}

/* ------- content media query ------ */
@media screen and (max-width: 600px) {
  .content {
    margin-top: 7rem;
  }
}

@media screen and (max-width: 600px) {
  .project-content {
    margin-top: 21rem;
  }
}

/* ------ work page mediaquery ------- */
@media all and (min-width: 500px) and (max-width: 1024px) {
  .grid {
    grid-template-columns: 1fr 1fr;
  }
}

@media all and (max-width: 500px) {
  .grid {
    grid-template-columns: 1fr;
  }
}

/* mediaQuery to make animated svg responsive */
@media all and (max-width: 600px) {
  svg {
    width: 90%;
  }
}

/* ---- Contact Form MediaQuery ---- */

/* responsive design change for small screens */
@media screen and (max-width: 600px) {
  input[type='submit'] {
    width: 100%;
    margin-top: 0;
  }
}

/* ---- About Page Media Query ---- */
@media all and (min-width: 500px) and (max-width: 600px) {
  .grid-container {
    grid-template-columns: 1fr 1fr;
  }
}

@media all and (max-width: 600px) {
  .grid-container {
    grid-template-columns: 1fr;
  }
}

@media all and (min-width: 500px) and (max-width: 600px) {
  .item-1 {
    grid-column: 2 / span 2;
  }
}

@media all and (max-width: 600px) {
  .item-1 {
    grid-column: 1 / span 1;
  }
}

/* ------ app-image ------ */
@media all and (max-width: 600px) {
  .app-image {
    width: 90%;
  }
}

/* This is the long version of the above code full of redundant code:::
@media all and (max-width: 500px) {
  .grid {
    grid-template-columns: 1fr;
    grid-gap: 10px;
  }
  .grid__item:last-child {
    grid-column: auto / auto;
    grid-row: auto / auto;
  }
  h1 {
    font-size: 22px;
  }
}
@media all and (min-width: 500px) and (max-width: 750px){
  .grid {
    grid-template-columns: 1fr 1fr;
    grid-gap: 10px;
  }
  .grid__item:last-child {
    grid-column: auto / auto;
    grid-row: auto / auto;
  }
  h1 {
    font-size: 22px;
  }
}

*/
