/*
Colors Used:
Black: #000;
ErrorRed: #8b0000;
Taupe: #8c756a;
Purple: #625779;

Ivory: #FFFFF0;
OliveDrab: #737c00;
Orange: #dd8e5a;
*/

/* CSS variables */
:root {
  --primary-color: #737c00;
  --primary-background: #fffff0;
  --primary-font-color: #000;
  --primary-font-size: 23px;
  --button-text-primary: #fffff0;
  --secondary-color: #737c00;
  --secondary-font-size: 16px;
  --visited-link: #dd8e5a;
  --unopened-link: #000;
  --dark-grey: #2b2b2b;
  --error-color: #8b0000;
  --grid-background-color: #8c756a;
  --header-font-weight: 700;
  --button-background: #737c00;
  --white: #fffff0;
  --black: #000;
  --purple: #625779;
  --orange: #dd8e5a;
  --link-font-size: 20px;
}

/* This forces Box model into including padding and border
 in element size calculations if an element has been given a specific size. */
* {
  box-sizing: border-box;
}

/* meaning if you wanted an element of 124px with a padding
of 20px and a border of 4px would actually turn into 100px
making it more uniform. */

/* BODY */
body {
  /* Remember that you have to add the 'Lato' font
  into the <head> of an HTML document before it will load.
  The comma followed by sans-serif is a default font that
  will be used if Lato can't be used. */
  font-family: 'Lato', sans-serif;
  font-weight: 400;
  font-size: var(--primary-font-size);
  line-height: 1.6;
  background-color: var(--primary-background);
  color: var(--primary-font-color);
  height: 100%;
}

p {
  font-size: var(--primary-font-size);
  padding: 1rem;
  margin: 1rem;
}

/* HEADERS */
h1 {
  font-size: 30px;
  font-weight: var(--header-font-weight);
  margin: 2rem;
}

h2 {
  font-size: 24px;
  font-weight: var(--header-font-weight);
  margin: 2rem;
}

h3 {
  font-size: 18px;
  font-weight: var(--header-font-weight);
}

/* LINKS */
a {
  color: var(--unopened-link);
  font-size: var(--link-font-size);
}

a:visited {
  /* visited link */
  color: var(--visited-link);
  font-size: var(--primary-font-size);
}

/* a:hover shows an effect when the mouse is hovering over a
link or a button. a:focus does the same thing while the user
navigates the web page with the keyboard */

/* Important note that a:hover must come after a:visited,
and a:active must come after a:hover in order to work. */
a:hover,
a:focus {
  /* No underlining when hovering over a link */
  text-decoration: none;
  color: var(--primary-color);
  transition: 0.2s;
}

a:active {
  /* selected link */
  color: var(--active-link);
}

.app-ul {
  list-style-type: none;
  padding: 0;
}

/* ------ Image container for project pages ------ */
.app-image {
  display: flex;
  align-self: center;
  max-width: 35rem;
  margin: 2rem;
  border-radius: 10px;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
}

/* BUTTONS */
button,
.button,
.button_secondary {
  /* overwrites browser defaults and resets the border */
  border: none;

  /* takes the font from the outer container */
  display: inline-block;
  font-family: inherit;
  font-size: 20px;

  /* styles the background color, font color,
   and text decoration (underline, etc.) of the button */
  background-color: var(--button-background);
  color: var(--primary-background);
  text-decoration: none;

  /* adds spacing to the button (this will be discussed more in-depth later) */
  padding: 10px;
  border-radius: 10px;

  /* gives the button a bottom border with a width of 2px,
  a type of solid, and a color in RGBA format */
  border-bottom: 2px solid rgba(0, 0, 0, 0.3);
  transition: 0.2s opacity;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);

  /* The longer format would be:
  transition-duration: 0.2s;
  transition-property: opacity;
  The shorter format gibves the duration and property
  requirements, while the (transition-timing-function)
   defaults to (ease) and the (transition-delay) defaults to
   (0s) thus allowing a shorthand version by simply using
   --> transition: (duration) (property); */
}

button:hover,
button:focus,
.button:hover,
.button:focus {
  /* lets the mouse appear as a hand when hovering over the button */
  cursor: pointer;

  /* reduces the opacity of the button to 80% */
  opacity: 0.8;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
}

a.button,
a.button:active,
a.button:hover {
  text-decoration: none;
  color: white;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
}

.button_secondary {
  background-color: var(--secondary-color);
  color: var(--primary-font-color);
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
}

.connection {
  margin: 2px;
  text-align: center;
}

/* Main Title, and Secondary Titles */
.main-title {
  text-align: center;
}

.secondary-title {
  font-size: 8vw;
}

/* PORTFOLIO PORTRAIT */
@keyframes rotate-picture {
  0% {
    transform: rotateY(0);
  }

  100% {
    transform: rotateY(360deg);
  }
}

.rotate-picture {
  animation: 0.5s rotate-picture 1 linear;
}

.profile__portrait {
  float: left;
  width: 100%; /* Height and Width can be expressed in multiple ways including % (80%) which can be useful when coding for multiple platforms. This is not limited to px and %. */
  max-width: 500px; /* Combined with (width: 100%;) this allows the image to take up 100% of the width of smaller screens and allowing the image to be larger/but no larger than the 325px allotted */
  height: auto; /* By setting the height to auto the aspect ratio remains true (no squished/stretched images) */
  margin-right: 40px;
  border-radius: 10px;
}

.main-content {
  display: flex;
  flex-direction: column;
  justify-content: center;
  max-width: 1200px;
  margin: auto;
  height: 100vh;
}

.crue-title {
  font-size: 12vw;
  margin: auto;
}

.crue-span {
  color: var(--secondary-color);
  font-weight: 700;
}

.tech-span {
  color: var(--secondary-color);
  font-weight: 700;
  font-size: 30px;
}

.index-spacer {
  margin-top: 2rem;
}

/* ------ NAVIGATION ------ */
#navbar {
  position: fixed;
  width: 100%;
  top: 0;
  transition: top 1s;
}

.top-nav {
  background-color: var(--primary-background);
  overflow: hidden;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
}

.top-nav a {
  float: right;
  display: block;
  color: var(--primary-font-color);
  text-align: center;
  padding: 18px 16px;
  text-decoration: none;
  font-size: 17px;
  border-radius: 5px;
}

a.logo-link {
  padding: 4px 0;
  float: left;
}

.top-nav a:hover {
  background-color: var(--primary-color);
  color: var(--primary-font-color);
}

.top-nav a.active {
  background-color: var(--primary-color);
  color: var(--primary-font-color);
}

a.logo-link:hover {
  background-color: var(--primary-background);
}

.top-nav .icon {
  background: var(--primayr-background);
  display: none;
}

.content {
  margin: 5%;
}

.project-content {
  margin-top: 4rem;
}

/* Required fields */

/* When reffering to a (class) to change it's characteristics in
CSS you must add the (.) in order to pull up the specific (class). */

.required-field {
  font-family: inherit;
  font-size: 26px;
  color: var(--error-color);
  text-decoration: none;
}

/* PAGE-FOOTER */
.page-footer {
  clear: both;
  display: flex;
  flex-direction: column;
  text-align: center;
  margin-bottom: 1rem;
}

.logo-container {
  text-align: center;
  position: static;
}

.app-logo {
  padding: 0;
}

.foot-wrap {
  padding-bottom: 10px;
  border-radius: 10px;
}

.social-media a:hover {
  opacity: 0.5;
}

/* ------ ABOUT PAGE ------ */

.about {
  display: flex;
  flex-direction: column;
  text-align: center;
  margin: 10px;
}

.about-blurb {
  border-radius: 4px;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
  padding: 2%;
  text-align: left;
  font-size: 20px;
}

.about-blurb-text {
  float: right;
  text-align: left;
}

.about-me__images {
  width: 100%;
  max-height: 350px;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.4), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
}

.dot-circles {
  text-align: center;
}

.center-slides {
  display: flex;
  justify-content: center;
}

/* Slideshow container */
.slideshow-container {
  justify-content: center;
  text-align: center;
  max-width: 850px;
  margin: 2%;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.4), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
  padding: 2%;
  border-radius: 10px;
}

/* Hide the images by default */
.about-slides {
  display: none;
}

/* Next & previous buttons */
.prev,
.next {
  cursor: pointer;
  width: auto;
  padding: 16px;
  margin: auto;
  background-color: var(--primary-color);
  opacity: 0.8;
  color: var(--primary-background);
  font-weight: bold;
  font-size: 18px;
  transition: 0.6s ease;
  border-radius: 10px;
  user-select: none;
  text-shadow: 3px 3px var(--black);
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.4), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
}

.slide-btn-container {
  display: flex;
  justify-content: center;
}

/* On hover, add a black background color with a little bit see-through */
.prev:hover,
.next:hover {
  opacity: 0.5;
}

/* Caption text */
.captions {
  color: var(--primary-font-color);
  font-size: 15px;
  padding: 8px 12px;
  width: 100%;
  text-align: center;
}

/* The dots/bullets/indicators */
.dot {
  cursor: pointer;
  height: 15px;
  width: 15px;
  margin: 0 2px;
  background-color: #bbb;
  border-radius: 50%;
  display: inline-block;
  transition: background-color 0.6s ease;
}

.dot-active,
.dot:hover {
  background-color: #717171;
}

/* Fading animation */
.fade {
  -webkit-animation-name: fade;
  -webkit-animation-duration: 1.5s;
  animation-name: fade;
  animation-duration: 1.5s;
}

@-webkit-keyframes fade {
  from {
    opacity: 0.4;
  }
  to {
    opacity: 1;
  }
}

@keyframes fade {
  from {
    opacity: 0.4;
  }
  to {
    opacity: 1;
  }
}

.grid-container {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  grid-gap: 5px;
  background-color: var(--primary-background);
  padding: 10px;
  margin: auto;
  margin-top: 10px;
  margin-bottom: 10px;
  width: 90%;
  border-radius: 10px;
}

.item-1 {
  grid-column: 1 / span 3;
}

.image-16 {
  grid-column: 1 / span 3;
}

.grid-container > div {
  background-color: var(--secondary-color);
  text-align: center;
  padding: 20px 0;
  font-size: 30px;
}

.cv-container {
  display: flex;
  margin: 10px;
  justify-content: center;
}

/* ------ Contact Page ------ */

/* Contact Form */

.contact-container {
  display: flex;
  flex-direction: column;
  text-align: center;
  margin: 10px;
}

.contact-card {
  padding: 4rem 1rem;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.4), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
  border-radius: 10px;
}

input[type='text'],
select,
textarea {
  width: 50%;
  padding: 12px;
  border: 1px solid #ccc;
  border-radius: 10px;
  resize: vertical;
}

input[type='email'],
select,
textarea {
  width: 50%;
  padding: 12px;
  border: 1px solid #ccc;
  border-radius: 10px;
  resize: vertical;
}

.contact-label {
  margin-left: 25%;
}

label {
  padding-right: 12px;
  padding-top: 12px;
  display: flex;
  flex-direction: row;
  justify-content: flex-start;
}

label {
  clear: all;
}

.submit-container {
  text-align: center;
}

.contact-btn {
  width: 45%;
  background-color: var(--primary-color);
  color: var(--primary-font-color);
  padding: 12px 20px;
  border: none;
  border-radius: 10px;
  text-decoration: none;
  cursor: pointer;
  margin: 0;
  text-align: center;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.4), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
}

.contact-btn:hover {
  opacity: 0.6;
}

.email-input {
  width: 100%;
  padding: 12px;
  border: 1px solid #ccc;
  border-radius: 10px;
  resize: vertical;
}

.col-form_label,
.col-form_input {
  width: 100%;
  margin-top: 0;
}

/* Clear floats after columns */
.row::after {
  content: '';
  display: table;
  clear: both;
}

.contact-info {
  display: block;
  text-align: center;
}

.additional-contact {
  background-color: var(--primary-background);
  margin: 8%;
  padding: 10px;
  border-radius: 10px;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.4), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
}

.contact-text {
  font-size: 18px;
}
/* ------ Projects Page ------ */

.project-container {
  display: flex;
  flex-direction: column;
  text-align: center;
  align-items: center;
  margin: 10px;
}
.project-title-left {
  text-align: left;
  font-size: 60px;
}

.project-title-right {
  text-align: right;
}

.proj-desc-right {
  text-align: right;
  height: 45%;
}

.proj-desc-left {
  text-align: left;
}

.projects {
  margin-bottom: 1rem;
}

.pokedex-desc {
  height: 45%;
}

.project-logo {
  text-align: center;
  width: 10rem;
  padding: 2rem;
  border-radius: 10px;
}

/* ---- Project Demos ---- */
.chat-demo__container {
  text-align: center;
  justify-content: center;
  margin: 2%;
  height: 100%;
}

.video1 {
  height: 90vh;
  width: 90vw;
  border-radius: 30px;
}

.video-btn {
  height: 55px;
  background-color: var(--primary-color);
  color: var(--primary-background);
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.4), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
}

/* Grid fallback */
.grid-1__item {
  display: inline-block;
  justify-content: center;
  width: 33%;
  border-radius: 4px;
}

.grid-1_img__item {
  display: inline-block;
  align-self: center;
  width: 33%;
  border-radius: 10px;
}

.grid-1_text__item {
  display: inline-block;
  align-self: center;
  width: 33%;
}

.grid-2__item {
  display: inline-block;
  justify-content: center;
  width: 33%;
  border-radius: 4px;
}

.grid-2_img__item {
  display: inline-block;
  align-self: center;
  width: 33%;
  border-radius: 10px;
}
/* Styling CSS Grid */

/* The following is an example of a Grid layout. */
.grid-1 {
  display: grid;
  grid-template-columns: 1fr 1fr; /*  (1fr 1fr 1fr) (fr) stands for fraction and is a flex unit replacing the original (300px 300px 300px) value, you can use this because each grid item should be the same size. (fr) allows the columns to grow and shring within the page. Each section is spaced based on the other. If you wanted one column to be twice the size of the original you pass on the trait 2fr */

  /* grid-template-row: default is auto so you don't even need to add it, grid will add for you. */
  grid-gap: 2rem; /* Puts spacing between the grid items like margin would do by using (grid-gap) */
  margin: 1rem;
}

.grid-1 > div {
  width: auto;
  padding: 10px;
}

.grid-1_img__item {
  width: auto;
  background-image: linear-gradient(var(--purple), var(--primary-background));
  border-radius: 10px;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.4), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
}

.grid-2 {
  display: grid;
  grid-template-columns: 1fr 1fr; /*  (1fr 1fr 1fr) (fr) stands for fraction and is a flex unit replacing the original (300px 300px 300px) value, you can use this because each grid item should be the same size. (fr) allows the columns to grow and shring within the page. Each section is spaced based on the other. If you wanted one column to be twice the size of the original you pass on the trait 2fr */

  /* grid-template-row: default is auto so you don't even need to add it, grid will add for you. */
  grid-gap: 2rem; /* Puts spacing between the grid items like margin would do by using (grid-gap) */
  margin: 0 1rem;
}

.grid-2 > div {
  width: auto;
  padding: 10px;
}

.grid-2_img__item {
  width: auto;
  background-image: linear-gradient(var(--orange), var(--primary-background));
  border-radius: 10px;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.4), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
}
/* Longer way to code this:
  .grid__item:last-child {
    grid-column-start: 3;
    grid-column-end: 3;
    grid-row-start: 1;
    grid-row-end: 3;
  }
  */

.about-grid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  grid-gap: 2rem;
  margin: 0 1rem;
  height: 100%;
}

.about-grid > div {
  width: auto;
  padding: 10px;
}

.grid-text__item {
  width: auto;
  border-radius: 10px;
}

/* Media Queries all go at the end of CSS as the
last rule in CSS is the winner. If you have a new
rule following media query, it will not be used. */
img.profile_portrait.rotate-picture {
  clear: both;
}

@media screen and (max-width: 600px) {
  .grid-1 {
    grid-template-columns: 1fr;
  }

  .proj-desc-left,
  .project-title-right,
  .project-title-left {
    text-align: center;
  }
}

@media screen and (max-width: 600px) {
  .grid-2 {
    grid-template-columns: 1fr;
  }
}

/* ------ cruebeeflix ------ */

@media screen and (min-height: 870px) {
  .profile-hello {
    padding-top: 3rem;
    font-size: 50px;
  }

  .profile-text {
    padding-top: 2rem;
    font-size: 40px;
  }

  .index-spacer__bottom {
    margin-top: 5rem;
  }

  .crue-title {
    margin-bottom: 2rem;
  }

  .profile__portrait {
    margin: 1rem;
  }
}

/* ------ Logo Spinner ------ */
@media (prefers-reduced-motion: no-preference) {
  .logo-container {
    animation: app-logo-rotate 5s infinite ease-in-out;
  }
}

@media (prefers-reduced-motion: no-preference) {
  .app-logo {
    animation: app-logo-spin 5s infinite ease-in-out;
  }
}

@keyframes app-logo-rotate {
  20% {
    transform: rotateY(0);
  }

  100% {
    transform: rotateY(360deg);
  }
}

@keyframes app-logo-spin {
  20% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
}

/* ----- index mediaquery ----- */
@media screen and (max-width: 600px) {
  .crue-title {
    font-size: 40px;
    margin: 1rem;
  }
}

@media screen and (max-width: 600px) {
  .profile {
    margin: 1rem;
    text-align: center;
    padding: 10px;
  }
}

@media screen and (max-width: 600px) {
  img.profile_portrait,
  .rotate-picture {
    margin: 0.4rem;
    text-align: center;
    justify-content: center;
  }
}

/* ----- Navbar media Query ------ */

@media screen and (max-width: 600px) {
  .top-nav a:not(:first-child) {
    display: none;
  }

  .top-nav a.icon {
    float: right;
    display: block;
  }
}

@media screen and (max-width: 600px) {
  .top-nav.responsive {
    position: relative;
  }

  .top-nav.responsive a.icon {
    position: absolute;
    right: 0;
    top: 0;
  }

  .top-nav.responsive a {
    float: none;
    display: block;
    text-align: left;
  }
}

/* ------- content media query ------ */
@media screen and (max-width: 600px) {
  .content {
    margin-top: 7rem;
  }
}

@media screen and (max-width: 600px) {
  .project-content {
    margin-top: 4rem;
  }
}

/* mediaQuery to make animated svg responsive */
@media all and (max-width: 600px) {
  svg {
    width: 90%;
  }
}

/* ---- Contact Form MediaQuery ---- */

/* responsive design change for small screens */
@media screen and (max-width: 600px) {
  input[type='text'],
  select,
  textarea,
  input[type='email'],
  select,
  textarea,
  .contact-btn {
    width: 100%;
    margin-top: 0;
  }
}

@media screen and (max-width: 600px) {
  .contact-label {
    margin-left: 0;
  }
}

/* ---- About Page Media Query ---- */
@media all and (min-width: 500px) and (max-width: 600px) {
  .grid-container {
    grid-template-columns: 1fr 1fr;
  }
}

@media all and (max-width: 600px) {
  .grid-container {
    grid-template-columns: 1fr;
  }
}

@media all and (min-width: 500px) and (max-width: 600px) {
  .item-1 {
    grid-column: 2 / span 2;
  }
}

@media all and (max-width: 600px) {
  .item-1 {
    grid-column: 1 / span 1;
  }
}

/* ------ app-image ------ */
@media all and (max-width: 600px) {
  .app-image {
    width: 90%;
  }
}

/* This is the long version of the above code full of redundant code:::
@media all and (max-width: 500px) {
  .grid {
    grid-template-columns: 1fr;
    grid-gap: 10px;
  }
  .grid__item:last-child {
    grid-column: auto / auto;
    grid-row: auto / auto;
  }
  h1 {
    font-size: 22px;
  }
}
@media all and (min-width: 500px) and (max-width: 750px){
  .grid {
    grid-template-columns: 1fr 1fr;
    grid-gap: 10px;
  }
  .grid__item:last-child {
    grid-column: auto / auto;
    grid-row: auto / auto;
  }
  h1 {
    font-size: 22px;
  }
}

*/
